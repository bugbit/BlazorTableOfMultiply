@inject VoicesService VoicesService

<InputSelect ValueExpression="()=> VoiceIdentity" @onchange="VoiceIdentity_ValueChanged" @attributes="AdditionalAttributes">
    @if (Voices != null)
    {
        foreach (var voice in Voices)
        {
            <option value="@voice.VoiceIdentity" selected="@(VoiceIdentity==voice.VoiceIdentity)">@(voice.Name) (@voice.Lang)</option>
        }
    }
</InputSelect>

@code {
    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public string? VoiceIdentity { get; set; }
    [Parameter] public EventCallback<string> VoiceIdentityChanged { get; set; }

    IEnumerable<SpeechSynthesisVoice>? Voices;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Voices = await this.VoicesService.GetVoicesAsync();

            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task VoiceIdentity_ValueChanged(ChangeEventArgs e)
    {
        var name = (string?)e.Value;

        VoiceIdentity = name;
        await VoiceIdentityChanged.InvokeAsync(name);
    }
}
