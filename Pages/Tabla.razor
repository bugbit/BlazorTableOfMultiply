@page "/tabla/{n:int}"
@inject SpeechSynthesis SpeechSynthesis
@implements IAsyncDisposable

<h3>Tabla de @N</h3>

<div class="container">
    @{
        var m = _m;
    }
    @for (var i = 1; i <= m; i++)
    {
        var style = i == currentSpeakM ? " background-color: yellow; color: black" : null;

        <div class="row">
            <div class="col-12 col-md-6">
                <span style="@style">@N x @i = @(N * i)</span>
            </div>
        </div>
    }
</div>
<div class="nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Tablas de multiplicar
            </NavLink>
        </div>
    </nav>
</div>
<button type="button" @onclick="DoSpeak" disabled="@isSpeaking" class="btn btn-lg btn-success">Repetir</button>

@code {
    [Parameter]
    public int N { get; set; }

    bool isSpeaking = false;
    const int _m = 10;
    SpeechSynthesisUtterance utterancet = new();
    private int currentSpeakM = 1;

    protected async override Task OnInitializedAsync()
    {
        utterancet.End += Speak_End;

        await DoSpeak();

        await base.OnInitializedAsync();
    }

    async Task DoSpeak()
    {
        if (SpeechSynthesis.Speaking)
            await SpeechSynthesis.CancelAsync();
        isSpeaking = true;
        currentSpeakM = 1;
        await DoSpeakCurrentM();
        StateHasChanged();
    }

    async Task DoSpeakCurrentM()
    {
        utterancet.Text = $"{N} por {currentSpeakM}, {N * currentSpeakM}";
        await this.SpeechSynthesis.SpeakAsync(utterancet);
    }

    async void Speak_End(object? sender, SpeechSynthesisStatusEventArgs e)
    {
        if (currentSpeakM < _m)
        {
            currentSpeakM++;
            StateHasChanged();
            await DoSpeakCurrentM();
        }
        else
        {
            isSpeaking = false;
            StateHasChanged();
        }
    }

    async public ValueTask DisposeAsync()
    {
        await SpeechSynthesis.CancelAsync();
    }
}