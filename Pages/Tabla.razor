@page "/tabla/{n:int}"
@inject SpeechSynthesis SpeechSynthesis
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Tabla de @N</h3>

@{
    var m = _m;
}
<div class="container-fluid">
    @for (var i = 1; i <= m; i++)
    {
        var style = i == currentSpeakM ? " background-color: yellow; color: black" : null;

        <div class="col-12 col-md-6">
            <span style=@style>
                @FmtNumber(N) x @FmtNumber(i) = @FmtNumber(N * i)
                @if (!SpeakAllNumbers.GetValueOrDefault() && !isSpeaking)
                {
                    var onclick = new RepetirNumberAction(this, i);

                    @:&emsp;
                    <button type="button" @onclick="onclick.DoAction"><span class="oi oi-loop-circular"></span></button>
                }
            </span>
        </div>
    }
</div>
<br />
<button type="button" @onclick="DoHome" class="btn btn-lg btn-primary">Tablas de multiplicar</button>&nbsp;
@if (!isSpeaking)
{
    <button type="button" @onclick="DoRepetirTabla" class="btn btn-lg btn-secondary"><span class="oi oi-loop-circular"></span>Repetir</button>
    @:&nbsp;
}
else
{
    <button type="button" @onclick="Cancel" class="btn btn-lg btn-danger">Cancelar</button>
    @:&nbsp;
}
<button type="button" @onclick="DoRepasar" class="btn btn-lg btn-secondary">Repasar</button>

@code {
    [Parameter]
    public int N { get; set; }

    [Parameter, SupplyParameterFromQuery()]
    public bool? SpeakAllNumbers { get; set; } = true;

    bool isSpeaking = false;
    const int _m = 10;
    SpeechSynthesisUtterance utterancet = new();
    private int currentSpeakM = 1;

    protected async override Task OnInitializedAsync()
    {
        utterancet.End += Speak_End;

        //await DoSpeak();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (SpeakAllNumbers.GetValueOrDefault())
                await DoSpeak();

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        if (!SpeakAllNumbers.HasValue)
            SpeakAllNumbers = true;
        base.OnParametersSet();
    }

    MarkupString FmtNumber(int n) => (MarkupString)$"{n,3}".Replace(" ", "&nbsp;");

    async Task DoHome()
    {
        await Cancel();
        NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri("").ToString()/*NavigationManager.BaseUri*/, false);
    }

    async Task DoSpeak()
    {
        if (SpeechSynthesis.Speaking)
            await SpeechSynthesis.CancelAsync();
        isSpeaking = true;
        await DoSpeakCurrentM();
        StateHasChanged();
    }

    async Task Cancel()
    {
        isSpeaking = false;
        SpeakAllNumbers = false;
        await SpeechSynthesis.CancelAsync();
        StateHasChanged();
    }

    async Task DoRepetirTabla()
    {
        currentSpeakM = 1;
        SpeakAllNumbers = true;
        await DoSpeak();
    }

    async Task DoRepasar()
    {
        var speakAllNumbers = SpeakAllNumbers;

        await Cancel();
        NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri($"repasar/{N}?speakAllNumbers={speakAllNumbers}").ToString()/*NavigationManager.BaseUri*/, false);
    }

    public async Task DoRepetirNumber(int m)
    {
        currentSpeakM = m;
        SpeakAllNumbers = false;
        await DoSpeak();
    }

    async Task DoSpeakCurrentM()
    {
        utterancet.Text = $"{N} por {currentSpeakM}, {N * currentSpeakM}";
        await this.SpeechSynthesis.SpeakAsync(utterancet);
    }

    async void Speak_End(object? sender, SpeechSynthesisStatusEventArgs e)
    {
        if (SpeakAllNumbers.GetValueOrDefault() && currentSpeakM < _m)
        {
            currentSpeakM++;
            StateHasChanged();
            await DoSpeakCurrentM();
        }
        else
        {
            isSpeaking = false;
            SpeakAllNumbers = false;
            StateHasChanged();
        }
    }

    async public ValueTask DisposeAsync()
    {
        await SpeechSynthesis.CancelAsync();
    }
}